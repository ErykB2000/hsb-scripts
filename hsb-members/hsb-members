#! /bin/bash

# 	Member list generator for Hackerspace Brussels 
#	(c) 2010 Frederic Pasteleurs <frederic@askarel.be>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

ME=$(basename $0)
CONFIGFILE="$0.conf"
# The raw bank statements will be stored here
BANKHISTORY="$(dirname $0)/bank"
# Default path for the SQL files
SQLDIR="$(dirname $0)/../concierge/sql/"

# Build the prompt array (SQL)
# Format of the structure: SQLINPUT[number]="fieldname|field description|RESULT"
SQL_FIELD[1]="firstname|Firstname"
SQL_FIELD[2]="name|Family name"
SQL_FIELD[3]="nickname|Nickname"
SQL_FIELD[4]="phonenumber|Phone number"
SQL_FIELD[5]="emailaddress|E-mail address"
SQL_FIELD[6]="why_member|Please explain why you want to be a member (free text)"
# end of mandatory inputs. The rest is optional
# This next block is not needed by the application and should be stored as a JSON object.
# The inputdata function should first be made table-agnostic and cleaned up.
SQL_FIELD[7]="birthdate|About you: Your birth date (YYYY-MM-DD)"
SQL_FIELD[8]="birthcity|           City were you born"
SQL_FIELD[9]="birthcountry|           In which country"
SQL_FIELD[10]="nationalregistry|          National registry number"
SQL_FIELD[11]="snailcommune|About your home: which commune"
SQL_FIELD[12]="snailpostcode|                 Postal code"
SQL_FIELD[13]="snailstreet|                  Street name"
SQL_FIELD[14]="snailnumber|                  House/building number"
SQL_FIELD[15]="snailbox|                  Mailbox number (leave empty if N/A)"

############### <FUNCTIONS> ###############
# Function to call when we bail out
die ()
{
    echo "$ME: $1. Exit"
    if [ "_$2" = "_" ]; then
	exit 1
	else
	exit $2
    fi
}

# run a SQL command.
# input: SQL request
# output: tab-separated data
# exit code 0: request successful
runsql ()
{
    test -z "$1" && die "Empty SQL request"
    mysql -h"$SQLHOST" -u"$SQLUSER" -p"$SQLPASS" -D"$SQLDB" -s --skip-column-names -e "$1" 2>&1
}

# run a SQL file.
# input: file containing SQL requests to execute
# output: tab-separated data
# exit code 0: request successful
runsqlfile ()
{
    test -f "$1" || die "File $1 does not exist"
    cat "$1" | mysql -h"$SQLHOST" -u"$SQLUSER" -p"$SQLPASS" -D"$SQLDB" -s --skip-column-names 2>&1
}

# Generate the 'Communication' field for the virement
# Format: +++DDD/DDDD/DDDSS+++
# DDDDDDDDDD: Any number you like. This is the only parameter needed.
# SS: Above number mod 97. Set to 97 if zero.
# Banks love obsolete^Wproven technologies. :-)
function mkcomm()
{
COMMSTR="$1"
COMMSTR="${COMMSTR:0:10}"		# Trim string length to 10
COMM_MODULO=$(expr $COMMSTR % 97 )	# Get reminder
case $COMM_MODULO in			# Padding and/or correction
    "0") COMM_MODULO="97" ;;
    [1-9]) COMM_MODULO="0$COMM_MODULO" ;;
esac
echo "+++${COMMSTR:0:3}/${COMMSTR:3:4}/${COMMSTR:7:3}$COMM_MODULO+++" # Chop into blocks
}

# Return the string properly quoted and escaped. TO USE WHILE BUILDING THE QUERY !!
function sqlescape()
{
    ESCAPECHARS="'\"\\"
    echo "$1"
}

# Verify the IBAN account number. 
# Input: what look like an IBAN number
# output: a clean IBAN number with no space. Nothing if garbage.
# Documentation: http://en.wikipedia.org/wiki/International_Bank_Account_Number
function verifyiban()
{
    # Do not remove front space: seq is 1-based, bash strings are zero-based.
    IBANTABLE=" ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    # Remove all spaces and junk from the string. They will be added later when needed.
    IBAN=$(echo "$1" |tr [:lower:] [:upper:] | sed -e 's/[^0-9A-Z]//gI')
    IBANCOUNTRY=${IBAN:0:2}
    IBANMODULO=${IBAN:2:2}
    IBANACCOUNT=${IBAN:4}
    IBANLENGTH=$(runsql "select validlength from validiban where country like '$IBANCOUNTRY';")
    # Is it in IBAN database ?
    if [ -n "$IBANLENGTH" ]; then
	# Is it the correct length ?
	if [ "$IBANLENGTH" -eq "$(echo -n "$IBAN" | wc -c)" ]; then
	    # Build sed script to transform letters in numbers (A=10, B=11,... Z=35)
	    for i in $(seq $(echo -n $IBANTABLE |wc -c)); do
		SEDSCRIPT="s/${IBANTABLE:$i:1}/$(( $i +9 ))/gI;$SEDSCRIPT"
	    done
	    # Fuck me.
	    test "$(runsql "select $(echo "$IBANACCOUNT$IBANCOUNTRY$IBANMODULO" |sed -e "$SEDSCRIPT") % 97")" -eq 1 && echo "$IBAN" #"
	fi
    fi
}

# Verify belgian-style account number. It has 12 digits separated by dashes.
# The two last digits are the modulo 97 of the 10 first.
# input: what look like a belgian account number
# output: cleanly formatted belgian account number. Nothing if garbage
function verifybe()
{
    # Clean anything that do not look like a digit
    CLEANBE="$(echo "$1"|sed -e 's/[^0-9]//gI')"
    MODULO="${CLEANBE:10:2}"
    ACCOUNTNR="${CLEANBE:0:10}"
    test $MODULO -ne "$(( 10#$ACCOUNTNR % 97 ))" || echo "${CLEANBE:0:3}-${CLEANBE:3:7}-$MODULO"
}

function listcurrentsql()
{
    SQLRESULT=$(runsql "select entrydate,structuredcomm,firstname,name,nickname,phonenumber,emailaddress from hsbmembers where exitdate is null;")
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "$SQLRESULT"|tr "\t" ','
}

function listcancelledsql()
{
    SQLRESULT=$(runsql "select entrydate,structuredcomm,firstname,name,nickname,phonenumber,emailaddress,exitdate from hsbmembers where exitdate is not null;")
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "$SQLRESULT"|tr "\t" ','
}

function countcurrentsql()
{
    SQLRESULT=$(runsql "select count(structuredcomm) from hsbmembers where exitdate is null;") #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "There are currently $SQLRESULT members in the database."
}

function deletemembersql()
{
    SQLRESULT=$(runsql "select count(structuredcomm) from hsbmembers where exitdate is null and emailaddress like \"$1\"; ") #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    test "$SQLRESULT" != "1" && die "$1 not found within active members ($SQLRESULT)"
    SQLRESULT=$(runsql "update hsbmembers set exitdate=(select curdate()) where exitdate is null and emailaddress like \"$1\";") #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "$1: membership cancelled."

}

# Get the list of payments for a specific member.
# Input 1: member email address
# Input 2: year to check
# Output: a list of transactions
function checkmemberpayment()
{
    SQLRESULT=$(runsql "select firstname, name, entrydate, emailaddress, structuredcomm from hsbmembers where emailaddress like '$1' and exitdate is null; ")
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "------ $SQLRESULT ------"
    STRCOMM="$(echo "$SQLRESULT"|cut -f 5)"
    SQLRESULT=$(runsql "select date_val, other_account, message, amount, currency, other_account_name, hex (transactionhash) from bankstatements 
		    where (message like '$STRCOMM' or fix_fuckup_msg like '$STRCOMM') and date_val >= '$2-01-01' and date_val <= '$2-12-31' order by date_val;") #"
    test -z "$SQLRESULT" && echo $1 >> "$0-$2.unpaid" # List the freeloading offenders
    echo "$SQLRESULT"
}

# User interface - data is appended as a third field on the prompt
function inputdata()
{
for i in $(seq 1 ${#SQL_FIELD[@]}); do
    echo -n "[$i/${#SQL_FIELD[@]}] $(echo -n "${SQL_FIELD[$i]}"|cut -d '|' -f 2) [$(echo -n "${SQL_FIELD[$i]}"|cut -d '|' -f 3)]: "
    read
    SQL_FIELD[$i]="$(echo -n "${SQL_FIELD[$i]}"|cut -d '|' -f 1,2)|$REPLY"
done
}

# Re-send the banking information
function resendbankinfos()
{
    SQLRESULT=$(runsql "select count(structuredcomm) from hsbmembers where exitdate is null and emailaddress like \"$1\"; ") #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    test "$SQLRESULT" != "1" && die "$1 not found within active members ($SQLRESULT)"
    SQLRESULT=$(runsql "select firstname, structuredcomm, emailaddress from hsbmembers where exitdate is null and emailaddress like \"$1\";") #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "Hello $(echo "$SQLRESULT" | cut -f 1),

You received this mail because you requested the needed informations to honour
your membership of Hackerspace Brussels.

Here are the needed informations: 
bank account: ${BANKACCOUNT:0:4} ${BANKACCOUNT:4:4} ${BANKACCOUNT:8:4} ${BANKACCOUNT:12:4} ${BANKACCOUNT:16:4} ${BANKACCOUNT:20:4}
Monthly amount: $MONTHLYFEE $CURRENCY
Communication: $(echo "$SQLRESULT"|cut -f 2)

You *MUST* use the communication string above: it allow us to automate the
day by day follow up of the financial aspect of the association.

Yearly payments are not supported yet.

-- 
Hackerspace Brussels

This mail is sent automagically from a broken half-assed bash script. You
can see the gory details here: https://github.com/askarel/hsb-scripts
"| mail -s "HSBXL - information update" $(echo "$SQLRESULT"|cut -f 3) && echo "Email sent to $(echo "$SQLRESULT"|cut -f 3)"
}

function begformoney()
{
    SQLRESULT=$(runsql "select count(structuredcomm) from hsbmembers where exitdate is null and emailaddress like \"$1\"; ") #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    test "$SQLRESULT" != "1" && die "$1 not found within active members ($SQLRESULT)"
    SQLRESULT=$(runsql "select firstname, structuredcomm, emailaddress from hsbmembers where exitdate is null and emailaddress like \"$1\";") #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "Hello $(echo "$SQLRESULT" | cut -f 1),

Today we balanced the books and we found out that you did not bring your
financial contribution to the expenses that occurs while operating a real
world infrastructure.

It could be any of those reasons:
 - your bank automatically stopped the automatic transfer
   without warning you,
 - You forgot to make the transfer (D'oh !!)
 - You don't want to be a member anymore

Here are the needed informations: 
bank account: ${BANKACCOUNT:0:4} ${BANKACCOUNT:4:4} ${BANKACCOUNT:8:4} ${BANKACCOUNT:12:4} ${BANKACCOUNT:16:4} ${BANKACCOUNT:20:4}
Monthly amount: $MONTHLYFEE $CURRENCY
Communication: $(echo "$SQLRESULT"|cut -f 2)

You *MUST* use the communication string above: it allow us to automate the
day by day follow up of the financial aspect of the association.

Yearly payments are not supported yet.

If you don't want to be a member, just reply to the mail, tell me so and i will
not bother you anymore. Just bring us the key back. :-)

-- 
Hackerspace Brussels

This mail is sent automagically from a broken half-assed bash script. You
can see the gory details here: https://github.com/askarel/hsb-scripts
"| mail -s "HSBXL - BooksBetterBeBalanced - About your membership" $(echo "$SQLRESULT"|cut -f 3) && echo "Email sent to $(echo "$SQLRESULT"|cut -f 3)"


}

# Add a new member to the database: build the query with the provided data
function addmember()
{
    inputdata
    THESQL="insert into hsbmembers (entrydate, structuredcomm"
    for i in $(seq 1 ${#SQL_FIELD[@]}); do
	THESQL="$THESQL, $(echo -n "${SQL_FIELD[$i]}"|cut -d '|' -f 1)"
    done
    THESQL="$THESQL ) values ((select curdate()), \"$(mkcomm 0$RANDOM$RANDOM$RANDOM$RANDOM)\""
    for i in $(seq 1 ${#SQL_FIELD[@]}); do
	if [ -z "$(echo -n "${SQL_FIELD[$i]}"|cut -d '|' -f 3)" ];
	    then
		THESQL="$THESQL, NULL"
	    else
		THESQL="$THESQL, \"$(echo -n "${SQL_FIELD[$i]}"|cut -d '|' -f 3)\""
	fi
    done
    THESQL="$THESQL );"
#    echo "$THESQL"
    SQLRESULT=$(runsql "$THESQL")
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    SQLRESULT=$(runsql "select structuredcomm,firstname,emailaddress,why_member from hsbmembers where exitdate is null and emailaddress like \"$(echo -n "${SQL_FIELD[5]}"|cut -d '|' -f 3)\";"| tr "\t" "," ) #" Syntax higlighter choke on that.
    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
    echo "Added to DB: $SQLRESULT"
    echo "Hello $(echo $SQLRESULT|cut -d ',' -f 2),

This e-mail is the confirmation that you are registered as an official
member of Hackerspace Brussels VZW/ASBL.

Since we have to spend money for the facilities, internet and electricity,
we need to ask you some every month. Not much, but it's enough to keep us 
afloat. You can ask your bank to make an automatic transfer to the following
bank account: ${BANKACCOUNT:0:4} ${BANKACCOUNT:4:4} ${BANKACCOUNT:8:4} ${BANKACCOUNT:12:4} ${BANKACCOUNT:16:4} ${BANKACCOUNT:20:4}
Monthly amount: $MONTHLYFEE $CURRENCY
Communication: $(echo $SQLRESULT|cut -d ',' -f 1)

You *MUST* use the communication string above: it allow us to automate the
day by day follow up of the financial aspect of the association.

You decided to join us for the following reason:
$(echo "$SQLRESULT"|cut -d ',' -f 4-)

-- 
Hackerspace Brussels

This mail is sent automagically from a broken half-assed bash script. You
can see the gory details here: https://github.com/askarel/hsb-scripts/
"| mail -s "HSBXL - Welcome aboard" $(echo $SQLRESULT|cut -d ',' -f 3) && echo "mail sent to $(echo $SQLRESULT|cut -d ',' -f 3)"
}

function editmember()
{
echo "$ME: Not implemented: Use a text editor or a spreadsheet program with some common sense. :-)"
}

# Search an exact match in the CSV file.
# parameter 1: file name
# parameter 2: what to search
# parameter 3: column(s) to search into. Leave empty to search all fields
# output: line number(s) of the matching entries (1 match per line)
# 	  no output -> no match.
function matchincsv()
{
    if [ -f "$1" ]; then
	F="$3"
	test -z "$F" && F='1-'
	cat "$1"|cut -d ';' -f "$F"| grep -wn "^${2}$" | cut -d ':' -f 1
#	die "$1 exist"
    else
	die "matchincsv(): File $1 doesn't exist"
    fi
}

# Get data from CSV file
# parameter 1: file name
# parameter 2: row number
# parameter 3: column number (if empty, return the whole line)
# output: chosen data
function getcsvdata()
{
    if [ -f "$1" ]; then
	F="$3"
	test -z "$F" && F='1-'
	cat "$1"|sed -n "${2}p"|cut -d ';' -f "$F"
    else
	die "getcsvdata(): File $1 doesn't exist"
    fi
}

# Format and validate the datafile from Argenta bank
# Parameter 1: file to import
# outputs:	- Valid data imported into db
#		- Copy of the file saved for future reference
#		- Invalid data are discarded from output (garbage in, no garbage out)
#		- Logfile along the data files
function argenta_import()
{
    if [ -f "$1" ]; then
	CSVFILEHASH="$(sha1sum -b $1 | cut -d ' ' -f 1)"
	# My bank account number is on line 1, cell 2. Make sure it is valid before going forward
	MYACCOUNT="$(verifyiban "$(getcsvdata $1 1 2)")" #" Syntax highlighter choke on that
	if [ -n "$MYACCOUNT" ]; then
	    ACCOUNTDIR="$BANKHISTORY/$MYACCOUNT"
	    LOGFILE="$ACCOUNTDIR/$CSVFILEHASH-$(date '+%s').log"
	    TRANSACTIONCOPYFILE="$ACCOUNTDIR/$CSVFILEHASH.csv"
	    mkdir -p "$ACCOUNTDIR"
	    # Activate when working
	    if [ -e "$TRANSACTIONCOPYFILE" ]; then
		echo "$ME: WARNING: file already imported. Expect lots of errors if you decide to continue. Type 'yes' if it's OK"
		read LOTSOFWARNINGS
		test "$LOTSOFWARNINGS" = "yes" || die "aborted by user"
	    fi
	    cp "$1" "$TRANSACTIONCOPYFILE"
	    # Real data start at line 3. Line 2 is a text header.
	    LINECOUNTER=0
	    for i in $(seq 3 $(cat "$TRANSACTIONCOPYFILE" |wc -l)); do
		CSVDATA=$(getcsvdata "$TRANSACTIONCOPYFILE" "$i" "1,2,4,5,6,7,8,9,10")
		OTHER_ACCOUNT=$(echo -n "$CSVDATA"| cut -d ';' -f 6)
#		echo $OTHER_ACCOUNT
		THESQL="INSERT INTO bankstatements (this_account, transactionhash, date_val, amount, currency, date_account, other_account, other_account_name, message) 
			VALUES (
			\"$MYACCOUNT\", 
			unhex (sha (\"$(echo -n "$CSVDATA"\"))), 
			str_to_date (\"$(echo -n "$CSVDATA"| cut -d ';' -f 1)\", \"%d-%m-%Y\"), 
			\"$(echo -n "$CSVDATA"| cut -d ';' -f 3| sed -e 's/\.//g'| tr ',' '.')\", 
			\"$(echo -n "$CSVDATA"| cut -d ';' -f 4)\", 
			str_to_date (\"$(echo -n "$CSVDATA"| cut -d ';' -f 5)\", \"%d-%m-%Y\"), 
			\"$OTHER_ACCOUNT\", 
			\"$(echo -n "$CSVDATA"| cut -d ';' -f 7)\", 
			\"$(echo -n "$CSVDATA"| cut -d ';' -f 8)$(echo -n "$CSVDATA"| cut -d ';' -f 9)\");"
		SQLRESULT=$(runsql "$THESQL")
		if [ $? = "0" ]; then
			LINECOUNTER=$(( $LINECOUNTER + 1))
			else
			echo "$TRANSACTIONCOPYFILE: Failed to import line: $CSVDATA, reason: $SQLRESULT" >> $LOGFILE
		fi
	    done
	echo "$TRANSACTIONCOPYFILE: $LINECOUNTER/$(cat "$TRANSACTIONCOPYFILE" |wc -l) imported. 2 header lines skipped." >> $LOGFILE
	echo "$TRANSACTIONCOPYFILE: $LINECOUNTER/$(cat "$TRANSACTIONCOPYFILE" |wc -l) imported. 2 header lines skipped."
	fi
    else
	die "argenta_import(): File $1 doesn't exist"
    fi
}


############### </FUNCTIONS> ###############

############### <SANITY CHECKS> ###############

# Load config file and check sanity
test -f "$CONFIGFILE" || die "No config file found ($CONFIGFILE)"
. $CONFIGFILE
test -n "$BANKACCOUNT" || die "$CONFIGFILE: BANKACCOUNT variable is empty"
test -n "$BANKNAME" || die "$CONFIGFILE: BANKNAME variable is empty"
test -n "$MAILFROM" || die "$CONFIGFILE: MAILFROM variable (sender e-mail address) is empty"
test -n "$MONTHLYFEE" || die "$CONFIGFILE: MONTHLYFEE variable is empty"
test -n "$SQLUSER" || die "$CONFIGFILE: SQLUSER variable is empty"
test -n "$SQLPASS" || die "$CONFIGFILE: SQLPASS variable is empty"
test -n "$SQLDB" || die "$CONFIGFILE: SQLDB: Database to use not specified"
test -n "$ORGNAME" || die "$CONFIGFILE: ORGNAME: Organisation name is not set"
# By default we talk in euros
test -n "$CURRENCY" || CURRENCY="EUR"
# A year is (usually) 12 months. This is an override if needed
test -n "$YEARLYFEE" || YEARLYFEE=$((12*$MONTHLYFEE))
# In case the bank account number has spaces
BANKACCOUNT=$(echo $BANKACCOUNT|tr -d ' ')
# If empty, use localhost
test -n "$SQLHOST" || SQLHOST="127.0.0.1"
mkdir -p "$BANKHISTORY" || die "Can't create csv archive directory"
test -d "$SQLDIR" || die "SQL files repository not found. Current path: $SQLDIR"

# Is the database usable ? Try listing the tables.
SQLRESULT=$(runsql "show tables;")
test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"

# Attempt to create the tables
SQLRESULT="$(runsqlfile "$SQLDIR/tables.sql")"
test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"

# XXX: Should be done at install time
# Insert the IBAN DATA
runsqlfile "$SQLDIR/ibandata.sql"

############### </SANITY CHECKS> ###############

# Run script
case $1 in
    list-current)
	echo "# date_entered, virement_string, firstname, name, nickname, phonenumber, email"
	listcurrentsql
    ;;
    add)
	addmember
    ;;
    editsql)
    inputdata

for i in $(seq 1 ${#SQL_FIELD[@]}); do
    echo "[$i/${#SQL_FIELD[@]}] ${SQL_FIELD[$i]} "
done
    inputdata
    ;;
    remove)
	test -z "$2" && die "You must specify member e-mail address"
	deletemembersql "$2"
    ;;
    list-cancelled)
	echo "# date_entered, virement_string, firstname, name, nickname, phonenumber, email, date_cancelled"
	listcancelledsql
    ;;
    count-current)
	countcurrentsql
    ;;
    modify)
	test -z "$2" && die "You must specify member e-mail address"
	editmember "$2"
    ;;
    dry)
	echo -n "$ME: dry run:  "
	verifyiban "$2"
	runsqlfile "../concierge/sql/ibandata.sql"
    ;;
    resendinfos)
	test -z "$2" && die "You must specify member e-mail address"
	resendbankinfos "$2"
    ;;
    begformoney)
	test -z "$2" && die "You must specify member e-mail address"
	test -z "$3" && die "You must really mean it for $2 (Just say \"yes\" to make it happen)."
	test "$3" = "yes" && begformoney "$2"
    ;;
    importbankcsv)
	case $2 in
	    argenta)
		argenta_import $3
	    ;;
	    belfius)
		echo "Not yet implemented (very messy internals)"
	    ;;
	    *)
		echo "Syntax: $ME importbankcsv bankname bankfile"
		echo " Valid banknames: argenta, belfius"
	    ;;
	esac
    ;;
    memberpayment)
	test -z "$2" && die "Syntax: $ME memberpayment emailaddress year (Use 'all' for all members, leave last parameter empty for current year)"
	CHECKYEAR="$3"
	test -z "$CHECKYEAR" && CHECKYEAR="$(date '+%Y')"
	# Remove the freeloading offenders file
	rm "$0-$CHECKYEAR.unpaid"
	if [ "$2" = "all" ]; then
	    SQLRESULT=$(runsql "select emailaddress from hsbmembers where exitdate is null; ")
	    test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
	    for i in $SQLRESULT; do
		checkmemberpayment "$i" "$CHECKYEAR"
	    done
	else
	    checkmemberpayment "$2" "$CHECKYEAR"
	fi
    ;;
    fixbankfuckup)
	# Check sanity of parameters before fouling up the database
	test $# = 3 || die "Syntax: $ME fixbankfuckup transactionhash structuredcomm"
	BANKMSG=$(runsql "select currency, message from bankstatements where transactionhash = 0x$2; ") #"
	test $? -ne "0" && die "There was a database error: The server says $BANKMSG"
	test -z "$BANKMSG" && die "Transaction 0x$2 not found in database"
	BANKMSG="$(echo "$BANKMSG"| cut -f 2)"
	STRUCTURED=$(runsql "select structuredcomm from hsbmembers where structuredcomm like '$3'; ") #"
	test $? -ne "0" && die "There was a database error: The server says $STRUCTURED"
	test -z "$STRUCTURED" && die "Structured communication $3 not found in database"
	SQLRESULT=$(runsql "update bankstatements set fix_fuckup_msg='$STRUCTURED' where transactionhash = 0x$2; ")
	test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
	echo "Added transaction 0x$2 with message '$BANKMSG' to $STRUCTURED"
    ;;
    massmail)
	# Spam all members
	test $# = 1 && die "Please specify the template file to use"
	test -f "$2" || die "File '$2' does not exist"
	MEMBERCOUNT="$(runsql 'select count(id) from hsbmembers where exitdate is null;')"
	test $? -ne "0" && die "There was a database error: The server says $SQLRESULT"
	if [ $# = 2 ]; then
	    echo "--- This is a preview of the mail using the first valid database entry. --"
	    echo "---     Add the word 'send' at the command line to send it for real    ---"
	    DBID="$(runsql "select id from hsbmembers where exitdate is null order by id limit 1;")"
	    MAILCOMMAND="test"
	else
	    DBID=$(runsql "select id from hsbmembers where exitdate is null;"|tr "\n" ' ')
	    test "$3" = 'send' || die "Not sending email to $MEMBERCOUNT people"
	    MAILCOMMAND="go"
	fi

	QUORUM="$(runsql 'select round((select count(id) from hsbmembers where exitdate is null) / 2)')"
	for i in $DBID; do
	    EMAIL="$(runsql "select emailaddress from hsbmembers where id like $i;")"
	    FIRSTNAME="$(runsql "select firstname from hsbmembers where id like $i;")"
	    export FIRSTNAME QUORUM
	    case "$MAILCOMMAND" in
		"test")
		 cat "$2" | envsubst
		;;
		"go")
		cat "$2" | envsubst | mail -s "HSBXL - important message" "$EMAIL" && echo "mail sent to $EMAIL"
		;;
		*)
		die 'Invalid command'
		;;
	    esac
	done
    ;;
    cron)
	case "$2" in
	    register)
		echo "$ME: Installing into daily crontab..."
		;;
	    unregister)
		echo "$ME: Removing daily crontab..."
		;;
	    run)
		echo "$ME: Running daily crontab..."
		;;
	    *)
		echo "Usage: $ME cron [option]"
		echo "Valid options:"
		echo " register 	Register this script into the crontab"
		echo " unregister	Remove script from crontab"
		echo " run		Run the cron job"
	    ;;
	esac
	;;
    *)
	echo "Usage: $ME [list-current|add|remove|list-cancelled|count-current|modify|dry|importbankcsv|resendinfos|begformoney|memberpayment|fixbankfuckup|cron|massmail]"
	exit 1
    ;;
esac

