#!/bin/bash

# The fridge point of sale machine - main application
# (c) 2012 Frederic Pasteleurs <askarel@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program or from the site that you downloaded it
# from; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307   USA
#

ME="$(basename $0)"
TMPDIR="$(mktemp -d /tmp/$ME.XXXXXXXXXXXXXX)"
CACHEDIR="/var/tmp/$ME"
TRANSACTIONDIR="/var/lib/$ME"
BARCODEFILE="${ME}-barcodes.csv"
SALEFILE="$TMPDIR/currentsale"
MAXX="$COLUMNS"
MAXY="$LINES"
CSVSEPARATOR=';'
# How many items on the bottom bar
BOTTOMBARITEMS=5
BOTTOMCODES=""

# products fields description
PRODUCT_FIELD_BARCODE='1'
PRODUCT_FIELD_DESCRIPTION='2'
PRODUCT_FIELD_REMAINSTOCK='4'
PRODUCT_FIELD_PRICE_NORMAL='6' # Any field number above is the different price for the event
PRODUCT_FIELD_PRICE_BYTENIGHT='7' # Any field number above is the different price for the event

PRODUCT_FIELD_PRICE="$PRODUCT_FIELD_PRICE_NORMAL"

readonly GC_TOPLEFT=0
readonly GC_HBAR=1
readonly GC_TOPRIGHT=3
readonly GC_BOTTOMLEFT=4
readonly GC_VBAR=5
readonly GC_BOTTOMRIGHT=6
readonly GC_CROSS=7
readonly GC_T_UP=8
readonly GC_T_DOWN=9
readonly GC_T_RIGHT=10
readonly GC_T_LEFT=11

readonly GG_SINGLE=0
readonly GG_DOUBLE=11
readonly GG_DOUBLE_H=22
readonly GG_DOUBLE_V=33

# declare -a GRAPHCHARS=("|" "-" "+" "+")
declare -a GRAPHCHARS=(	"\xe2\x94\x8c" "\xe2\x94\x80" "\xe2\x94\x90" "\xe2\x94\x94" "\xe2\x94\x82" "\xe2\x94\x98" "\xe2\x94\xbc" "\xe2\x94\xb4" "\xe2\x94\xac" "\xe2\x94\x9c" "\xe2\x94\xa4"
			"\xe2\x95\x94" "\xe2\x95\x90" "\xe2\x95\x97" "\xe2\x95\x9a" "\xe2\x95\x91" "\xe2\x95\x9d" "\xe2\x95\xac" "\xe2\x95\xa9" "\xe2\x95\xa6" "\xe2\x95\xa0" "\xe2\x95\xa3"
			"\xe2\x95\x93" "\xe2\x94\x80" "\xe2\x95\x96" "\xe2\x95\x99" "\xe2\x95\x91" "\xe2\x95\x9c" "\xe2\x95\xab" "\xe2\x95\xa8" "\xe2\x95\xa5" "\xe2\x95\x9f" "\xe2\x95\xa2"
			"\xe2\x95\x92" "\xe2\x95\x90" "\xe2\x95\x95" "\xe2\x95\x98" "\xe2\x94\x82" "\xe2\x95\x9b" "\xe2\x95\xaa" "\xe2\x95\xa7" "\xe2\x95\xa4" "\xe2\x95\x9e" "\xe2\x95\xa1"
)

unset CASHCOMMAND

############### FUNCTIONS ###############
# Function to call when we bail out
die()
{
    printf "%s: %s. Exit\n" "$ME" "$1"
    test -z "$2" && exit 1
    test -n "$2" && exit $2
}

# Erase a buffer file (1 parameter: buffer name)
destroybuffer()
{
    test -f "$TMPDIR/$1" && rm "$TMPDIR/$1"
}

# Show a predefined buffer (1 parameter: buffer name)
showbuffer()
{
    test -f "$TMPDIR/$1" && cat $TMPDIR/$1
}

# Position the cursor on the screen (1=X 2=Y)
# Parameter 3 is the buffer name to use.
# Leave parameter 3 empty for immediate display
gotoxy()
{
    BUF="$TMPDIR/$3"
    test -z "$3" && BUF="$(mktemp $TMPDIR/$ME.XXXXXXXXXXXXX)"
    printf "\033[%s;%sH" "$2" "$1" >> $BUF
    test -z "$3" && cat $BUF && rm $BUF
}

# Use gotoxy to set the start of the line. Start from the left
# Parameter 1: how many chars long ?
# Parameter 2: the buffer name to use.
# Leave parameter 2 empty for immediate display
hline()
{
    BUF="$TMPDIR/$2"
    test -z "$2" && BUF="$(mktemp $TMPDIR/$ME.XXXXXXXXXXXXX)"
#    HLINE="\033(0q\033(B"
#    HLINE="-"
    HLINE="\xE2\x94\x80"
    for i in $(seq 1 $1); do printf "$HLINE" >> $BUF ; done
    test -z "$2" && cat $BUF && rm $BUF
}

# Use gotoxy to set the start of the line. Start from the top
# Parameter 1: how many chars long ?
# Parameter 2: the buffer name to use.
# Leave parameter 2 empty for immediate display
vline()
{
    BUF="$TMPDIR/$2"
    test -z "$2" && BUF="$(mktemp $TMPDIR/$ME.XXXXXXXXXXXXX)"
    VLINE="|\033[1B\33[1D"
    for i in $(seq 1 $1); do printf "$VLINE" >> $BUF ; done
    test -z "$2" && cat $BUF && rm $BUF
}

# Parameter 1: the string  /!\ QUOTE IT /!\
# Parameter 2: the buffer name to use.
# Leave parameter 2 empty for immediate display
outtext()
{
    BUF="$TMPDIR/$2"
    test -z "$2" && BUF="$(mktemp $TMPDIR/$ME.XXXXXXXXXXXXX)"
    printf "$1" >> $BUF
    test -z "$2" && cat $BUF && rm $BUF
}

# Solve the equation passed in parameter 1
calculate()
{
    awk "BEGIN{printf \"%.2f\n\", ( $1 )}"
}

# Search an exact match in the CSV file.
# parameter 1: file name
# parameter 2: what to search
# parameter 3: column(s) to search into. Leave empty to search all fields
# output: line number(s) of the matching entries (1 match per line)
# 	  no output -> no match.
matchincsv()
{
    if [ -f "$1" ]; then
	F="$3"
	test -z "$F" && F='1-'
	cat "$1"|cut -d ';' -f "$F"| grep -wn "^${2}$" | cut -d ':' -f 1
#	die "$1 exist"
    else
	die "matchincsv(): File $1 doesn't exist"
    fi
}

# Search data in csv file
# parameter 1: file name
# parameter 2: what to search
# parameter 3: column(s) to search into. Leave empty to search all fields
# output: line number(s) of the matching entries (1 match per line)
findincsv()
{
    if [ -f "$1" ]; then
	F="$3"
	test -z "$F" && F='1-'
	cat "$1"|cut -d ';' -f "$F"| grep -n "$2"|cut -d ':' -f 1
    else
	die "findincsv(): File $1 doesn't exist"
    fi
}

# Get data from CSV file
# parameter 1: file name
# parameter 2: row number
# parameter 3: column number (if empty, return the whole line)
# output: chosen data
getcsvdata()
{
    if [ -f "$1" ]; then
	F="$3"
	test -z "$F" && F='1-'
	cat "$1"|sed -n "${2}p"|cut -d ';' -f "$F"
    else
	die "getcsvdata(): File $1 doesn't exist"
    fi
}

# Compute the sale total usint the current barcode file and the salefile
# parameter 1: sale file
# parameter 2: barcode file
computesaletotal()
{
    if [ -f "$1" ] && [ -f "$2" ]; then
	while read BARCDE
	do
	    test -z "$SALETOTL" && SALETOTL="0"
	    ROW=$(matchincsv "$2" "$BARCDE" $PRODUCT_FIELD_BARCODE)
	    SALETOTL=$(calculate "$SALETOTL + $(getcsvdata "$2" $ROW $PRODUCT_FIELD_PRICE)") #"
	done < "$1"
	printf "%s" "$SALETOTL"
    fi
}

computesubtotal()
{
    echo
}

############### SCREEN FUNCTIONS ###############

# Automagically position text snippet on the screen based on an index, screen width and a length.
# parameter 1: index
# parameter 2: snippet maximum length
# parameter 3: text
# parameter 4: buffer
# leave parameter 4 empty for immediate display
positionbyindex()
{
    BUF="$TMPDIR/$4"
    test -z "$4" && BUF="$(mktemp $TMPDIR/$ME.XXXXXXXXXXXXX)"
    # Determine how many columns we can fit on one line
    XSLOT=$(( $MAXX / $2 ))
    # Determine the row index
    YSLOT=$(( ( $1 - 1) / $XSLOT ))
    gotoxy $(( 1 + ( $2 * ( ($1 - 1) % $XSLOT ) ) )) $(( 4 + $YSLOT )) "$4"  ; printf "$3" >> $BUF
    test -z "$4" && cat $BUF && rm $BUF
}

# Show price list screen
# Parameter 1: barcode file.
# Parameter 2: event mode (empty=normal)
pricelist()
{
    if [ -f "$1" ]; then
	clear
	PRHEADER="$ORGNAME price list"
	gotoxy $(( ( $MAXX - $(echo "$PRHEADER"|wc -c) ) / 2 )) 2 ; outtext "$PRHEADER"

	for i in $( seq 1 $(cat "$CACHEDIR/$BARCODEFILE" |wc -l) ); do
	    # price string
	    ITEMPRICE="$(getcsvdata "$CACHEDIR/$BARCODEFILE" $i $PRODUCT_FIELD_PRICE) $CURRENCY"
	    # Calculate maximum description length
	    ITEMDESCLEN=$(( $MAXPRICELINE - $(echo $ITEMPRICE|wc -c) -2))
	    # Trim description
	    ITEMDESC="$(getcsvdata "$CACHEDIR/$BARCODEFILE" $i $PRODUCT_FIELD_DESCRIPTION | cut -c 1-$ITEMDESCLEN)"
    	    positionbyindex $i $MAXPRICELINE "$(printf "%${ITEMDESCLEN}s %s" "$ITEMDESC" "$ITEMPRICE")"
	done
    else
	die "pricelist(): File $1 doesn't exist"
    fi
}

# Show the prompt.
# Parameter 1: prepend some text
prompt()
{
    PROMPT="$1 >>>"
    gotoxy 1 $(( $MAXY -3 )); outtext "\033[K$PROMPT"
}

blanksalescreen()
{
    clear >> $TMPDIR/blanksalescreen
    gotoxy 1 1 blanksalescreen; outtext "Barcode" blanksalescreen
    gotoxy 1 2 blanksalescreen; outtext " number" blanksalescreen
    gotoxy 15 1 blanksalescreen; outtext "Description" blanksalescreen
    gotoxy $(( $MAXX - 15 )) 1 blanksalescreen; outtext "Quant." blanksalescreen
    gotoxy $(( $MAXX - 23 )) 1 blanksalescreen; outtext "U.Price" blanksalescreen
    gotoxy $(( $MAXX - 21 )) 2 blanksalescreen; outtext "$CURRENCY" blanksalescreen
    gotoxy $(( $MAXX - 7 )) 1 blanksalescreen; outtext "SubTot." blanksalescreen
    gotoxy $(( $MAXX - 5 )) 2 blanksalescreen; outtext "$CURRENCY" blanksalescreen
    gotoxy 1 3 blanksalescreen; hline $MAXX blanksalescreen
    gotoxy 14 1 blanksalescreen; vline $(( $MAXY - 4 )) blanksalescreen
    gotoxy $(( $MAXX - 24 )) 1 blanksalescreen; vline $(( $MAXY - 4 )) blanksalescreen
    gotoxy $(( $MAXX - 16 )) 1 blanksalescreen; vline $(( $MAXY - 4 )) blanksalescreen
    gotoxy $(( $MAXX - 8 )) 1 blanksalescreen; vline $(( $MAXY -2 )) blanksalescreen
    gotoxy 1 $(( $MAXY - 4 )) blanksalescreen;  hline $MAXX blanksalescreen
    gotoxy $(( $MAXX - 15 )) $(( $MAXY - 2)) blanksalescreen; outtext "TOTAL:" blanksalescreen
}

# Self explanatory. :-)
helpscreen()
{
    clear
    cat <<EOF
		How to use the fridge ?

- Buy stuff:	scan the barcodes of the products you want
- To pay cash:	Scan the CASH barcode and put the money in the jar
- Check cashbox balance: Scan the CASH barcode.

EOF
    prompt "Scan any barcode to quit."; read DUMMY
}

# Update the sale screen
# parameter 1: sale file
# parameter 2: barcode file
# parameter 3: event mode (empty=normal)
updatesalescreen()
{
    if [ -f "$1" ]; then
	YCOUNTER=4
	SALETOTAL=0
	cat $1|sort|uniq -c|tr -s ' ' ' ' |
	while read QUANTITY BARCODE
	do
	    POSITION=$(matchincsv "$CACHEDIR/$BARCODEFILE" "$BARCODE" $PRODUCT_FIELD_BARCODE)
	    SUBTOTAL="$(calculate "$(getcsvdata "$CACHEDIR/$BARCODEFILE" "$POSITION" $PRODUCT_FIELD_PRICE ) * $QUANTITY" )" #" Syntax highlighter choke on that.
	    SALETOTAL="$(calculate "$SALETOTAL + $SUBTOTAL" )"
	    gotoxy 1 $YCOUNTER ; outtext "$BARCODE"
	    gotoxy 15 $YCOUNTER ; outtext "$(getcsvdata "$CACHEDIR/$BARCODEFILE" "$POSITION" $PRODUCT_FIELD_DESCRIPTION) "
	    gotoxy $(( $MAXX - 22 )) $YCOUNTER ; outtext "$(getcsvdata "$CACHEDIR/$BARCODEFILE" "$POSITION" $PRODUCT_FIELD_PRICE) "
	    gotoxy $(( $MAXX - 14 )) $YCOUNTER ; outtext "$QUANTITY  "
	    gotoxy $(( $MAXX - 6 )) $YCOUNTER ; outtext "$SUBTOTAL"
	    gotoxy $(( $MAXX - 6 )) $(( $MAXY - 2 )) ; outtext "$SALETOTAL"
	    YCOUNTER=$(( $YCOUNTER + 1 ))
	done
    fi
}

badbarcode()
{
    destroybuffer badbarcode
    gotoxy 1 $(( $MAXY - 2 )) badbarcode; outtext "\033[K$1" badbarcode
}

# Prepare the command barcodes
# 1 parameter per bottom bar item
# Structure: command|text. A simple string if the text *is* the command.
setbottombar()
{
    destroybuffer bottombar
    gotoxy 1 $(( $MAXY - 1)) bottombar; hline $(($MAXX - 1 )) bottombar
    for i in $(seq 3 $MAXX); do CLEARBAR="$CLEARBAR "; done;
#    gotoxy 1 $MAXY bottombar;  outtext "$CLEARBAR" bottombar; gotoxy 1 $MAXY
    for i in $(seq 1 $(( $BOTTOMBARITEMS -1 )) ); do
#	gotoxy $(( ($MAXX / $BOTTOMBARITEMS) * $i )) $MAXY bottombar; outtext "|" bottombar
	gotoxy $(( ($MAXX / $BOTTOMBARITEMS) * $i )) $MAXY bottombar; outtext "\xe2\x95\x91" bottombar
    done
    BOTTOMCODES=""
    for i in $(seq 1 $# ); do
	BOTTOMCODES="$BOTTOMCODES,$(echo "$1"|cut -d '|' -f 1)"
	gotoxy $(( ($MAXX / $BOTTOMBARITEMS) * ($i-1) +1 )) $MAXY bottombar; outtext "$(echo "$1"|cut -d '|' -f 2)" bottombar
	shift
    done
}

# Decode the bottom bar options.
# Parameter: input barcode
# output: if option barcode, translate it
#	  if not an option, send input back unmodified
# Configure it with function setbottombar()
decodebottombar()
{
    case "$1" in
	"OPT:1")
	    echo "$BOTTOMCODES"| cut -d ',' -f 2
	    ;;
	"OPT:2")
	    echo "$BOTTOMCODES"| cut -d ',' -f 3
	    ;;
	"OPT:3")
	    echo "$BOTTOMCODES"| cut -d ',' -f 4
	    ;;
	"OPT:4")
	    echo "$BOTTOMCODES"| cut -d ',' -f 5
	    ;;
	"OPT:5")
	    echo "$BOTTOMCODES"| cut -d ',' -f 6
	    ;;
	"OPT:6")
	    echo "$BOTTOMCODES"| cut -d ',' -f 7
	    ;;
	"OPT:7")
	    echo "$BOTTOMCODES"| cut -d ',' -f 8
	    ;;
	"OPT:8")
	    echo "$BOTTOMCODES"| cut -d ',' -f 9
	    ;;
	*) # Not an option ? Transparently fall through.
	    echo "$1"
	    ;;
    esac
}

graftest()
{
    echo "$ME graph test"
    for i in 0 11 22 33 ; do 
	for j in $( seq 0 10 ); do 
	    echo -ne " ${GRAPHCHARS[ $(( $j + $i )) ]} "
	done
	echo ""
    done
    exit 0
}

test "$1" = "graftest" && graftest

############### CODE ###############
# Look for config file in the following locations: /etc, user directory and 
# script directory. Script directory always wins.
test -e "/etc/$ME.conf" && CONFIGFILE="/etc/$ME.conf"
test -e "$HOME/$ME.conf" && CONFIGFILE="$HOME/$ME.conf"
test -e "$0.conf" && CONFIGFILE="$0.conf"
test -z "$CONFIGFILE" && die "No config file found"
# Bring the config file
. "$CONFIGFILE"
# validate config file
test -n "$ORGNAME" || die "Variable ORGNAME is empty. Set it to the name of your organization"
test -n "$URLBAR" || die "Variable URLBAR is empty. Set it to the server holding the barcode database"
# By default we talk in euros, and we define the full set of coins and notes of the currency.
# Change it in the config file if you're not in the euro zone.
test -n "$CURRENCY" || CURRENCY="EUR"
test -n "$MONIES" || MONIES="0.01;0.02;0.05;0.10;0.20;0.50;1.00;2.00;5.00;10.00;20.00;50.00;100.00;200.00;500.00"
# By default, detect screen size from environment:
# If a specific screen size is defined in config file, use it.
# when all else fail, default to 80x25 :-)
test -z "$MAXX" && MAXX="80"
test -z "$MAXY" && MAXY="33"
mkdir -p "$CACHEDIR" || die "Cannot create the cache directory ($CACHEDIR)"
# Maximum length of the price line
test -z "$MAXPRICELINE" && MAXPRICELINE="39"
# Optional delay to wait
test -n "$WAITFORSTART" && echo "$ME: delayed start: $WAITFORSTART seconds." && sleep $WAITFORSTART
# Count the items of the currency
MONIESIZE="$(echo "$MONIES" |tr ';' '\n'|wc -l)"

# Fetch the CSV holding the barcodes
wget -O "$CACHEDIR/$BARCODEFILE" "$URLBAR/$BARCODEFILE"|| die "Problem downloading file $URLBAR/$BARCODEFILE"

echo "Building screens..."
blanksalescreen

while true; do
    if [ -f $SALEFILE ]; then
	showbuffer blanksalescreen
	updatesalescreen "$SALEFILE"
	setbottombar "CASH|PAY CASH" "UNSCAN" "CANCEL" "DONATE"
        MYPROMPT="Scan another product, or a code below."
    else
	pricelist "$CACHEDIR/$BARCODEFILE"
	setbottombar "CASH|Show cash" "EVENT|Event mode" "DONATE" "TRANSFER" "WITHDRAW"
        MYPROMPT="Scan/type a barcode"
    fi
    showbuffer badbarcode
    showbuffer bottombar
    prompt "$MYPROMPT"
    destroybuffer badbarcode
    # If a sale is in progress, block the date update
    test -e "$SALEFILE" || TODAYDIR="$CACHEDIR/$(date '+%Y%m%d')"
    test -d "$TODAYDIR" || mkdir -p "$TODAYDIR" || die "Cannot create today's directory ($TODAYDIR)"
    read REPLY
    REPLY=$(decodebottombar "$REPLY")
    case "$REPLY" in
	"CANCEL")
		rm $SALEFILE
	;;
	"EXIT") # cleanup and get out
		rm -rf $TMPDIR
		exit 0
	;;
	"UNSCAN") # Remove last scan
		cat "$SALEFILE" | sed '$d' > "$SALEFILE.tmp"
		rm "$SALEFILE"
		mv "$SALEFILE.tmp" "$SALEFILE"
		# if there was only one item, cancel the sale
		test "$(cat "$SALEFILE"|wc -l)" = "0" && rm "$SALEFILE"
	;;
	"CASH")
		if [ -e $SALEFILE ]; then
		    SALETOTAL="$(computesaletotal "$SALEFILE" "$CACHEDIR/$BARCODEFILE")"
		    badbarcode "Please insert $SALETOTAL $CURRENCY in the cash box. :-)"
		    echo "$SALETOTAL" >> "$CACHEDIR/CASHBOX"	# Add money to the box
		    mv "$SALEFILE" "$TODAYDIR/$(date '+%s %N'|md5sum|cut -d ' ' -f 1)-$(md5sum $SALEFILE|cut -d ' ' -f 1).sale"
		    test -n "$CASHCOMMAND" && $CASHCOMMAND &
		else # badbarcode() should really be named statusbar()
		    badbarcode "There is $(calculate "$(cat "$CACHEDIR/CASHBOX"|tr '\n' '+')0") $CURRENCY in the local cashbox." #"
		fi
	;;
	"TRANSFER")
		badbarcode "Transferring from account to account not implemented yet."
	;;
	"SHOPLIST")
		badbarcode "Shopping list not yet implemented. :-)"
	;;
	"DONATE")
		badbarcode "Donations will be implemented ASAP. ;-)"
	;;
	"EVENT")
	        if [ -f $SALEFILE ]; then
		    badbarcode "Bad context !"
		else
		    clear
		    setbottombar "NORMAL" "SPECIAL"
		    badbarcode ""
		    showbuffer badbarcode
		    showbuffer bottombar
		    prompt "Select event mode:"
		    read SPECIALEVENT
		    badbarcode "Selected."
		fi
	;;
	"HELP"|"help")
		helpscreen
	;;
	*)
        ## Test if known barcode
	    if [ -n "$REPLY" ]; then
		# product barcode processing
		if [ -n  "$(matchincsv "$CACHEDIR/$BARCODEFILE" "$REPLY" $PRODUCT_FIELD_BARCODE)" ]; then
			echo "$REPLY" >> $SALEFILE
			unset REPLY
		fi
		# donation barcode processing
		
		# paycard processing
		
		# When all else fail:
		test -n "$REPLY" && badbarcode "No idea what to do with barcode '$REPLY'. Try again."
	    fi
	;;
    esac
done
