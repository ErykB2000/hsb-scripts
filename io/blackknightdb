#!/bin/bash
#
#	Manipulate the RFID database
#
#	(c) 2014 Frederic Pasteleurs <frederic@askarel.be>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


# CONFIG AREA ##############################################
SQLHOST='localhost'
SQLUSER='rfid_web_user'
SQLPASS='ChangeMe'
SQLDB='rfid_db_hsbxl'

#############################################################
ME="$(basename $0)"
PAUSEFILE="/tmp/RFID.register"

# Function to call when we bail out
# Parameter 1: text to output
# Parameter 2: exitcode when leaving. Set to 1 if empty
die()
{
    echo "$ME: $1. Exit" >&2
    test -n "$2" && exit $2
    exit 1
}


# run a SQL command.
# Parameter 1: SQL request
# Parameter 2: if set, do not bail out on error
# output: tab-separated data
# exit code 0: request successful
runsql ()
{
    test -z "$1" && die "Empty SQL request"
    test -z "$2" && mysql -h"$SQLHOST" -u"$SQLUSER" -p"$SQLPASS" -D"$SQLDB" -s --skip-column-names -e "$1" || die "$ME: Failed query: '$1'" # Fix your junk !
    test -n "$2" && mysql -h"$SQLHOST" -u"$SQLUSER" -p"$SQLPASS" -D"$SQLDB" -s --skip-column-names -e "$1" 2>&1 # We want the error
}

# Make sure we remove the pause file when bailing out
cleanup()
{
    rm -f "$PAUSEFILE"
    exit
} 

trap cleanup EXIT

helptext()
{
cat << HELPTEXT
Usage: $ME [adduser|addtag|gettaginfo|revoketag|listusers|listusertags|listalltags|edituser|showlog]

    adduser			Add a user to the system
    addtag user [taghash]	Add a tag ID to a user. If taghash empty, try to read it from RFID reader
    gettaginfo taghash		Get user infos from tag
    revoketag taghash		Blacklist a tag. Add STOLEN or LOST to make the ban permanent
    listusers			Output a list of users
    listusertags user		List all tags used by user
    listalltags			List all tags, broken down by user
    dumpflat			Dump a flat text version of the valid tags data (for embedded use)
    edituser			Change user parameters*
    showlog			Show logs*

* not implemented
HELPTEXT
exit 1
}

gettaghash()
{
    unset HASH # make sure variable is empty
    echo "Waiting for RFID card..." >&2
    touch $PAUSEFILE
    while test -z "$HASH"; do
	ATRHASH="$(echo "reset" | scriptor 2> /dev/null | tail -n 1 | md5sum | cut -d ' ' -f 1)"
	if [ "$ATRHASH" != 'd41d8cd98f00b204e9800998ecf8427e' ] ; then # d41d8cd98f00b204e9800998ecf8427e is the empty string hash
		# Ask the card UID and hash the result (i don't care about the garbage)
		CARDHASH="$(echo 'ffca000000'|scriptor 2> /dev/null|tail -n 1 | md5sum | cut -d ' ' -f 1)"
		if [ "$ATRHASH" != 'd41d8cd98f00b204e9800998ecf8427e' ] ; then # d41d8cd98f00b204e9800998ecf8427e is the empty string hash
		    HASH="$(echo -n "$CARDHASH $ATRHASH"| md5sum | cut -d ' ' -f 1)"
		fi
	else
	    unset ATRHASH
	fi
    done
    # Wait until the card is gone
    while test -z "$CARDREMOVED"; do
	echo "reset"|scriptor > /dev/null 2>&1
	test "${PIPESTATUS[1]}" -ne "0" && CARDREMOVED="yes"
    done
    rm $PAUSEFILE
    echo "$HASH"
}

adduser()
{
    test -z "$1" && die "You need to supply the username to create"
    test -n "$(runsql "select login from users where login like '$1'")" && die "User $1 already exists"
    runsql "Insert into users values ('$1', 'Blaah', 'NORMAL_USE', 0)"
}

addtag()
{
    test -z "$1" && die "Specify the username and the tag hash"
    test -z "$(runsql "select login from users where login like '$1'")" && die "User $1 do not exist"
    MYTAGHASH="$2"
    test -z "$MYTAGHASH" && MYTAGHASH="$(gettaghash)"
    test -n "$(runsql "select status from tags where uid like '$MYTAGHASH' and (status like 'STOLEN' or status like 'LOST')")" && die "Tag $MYTAGHASH cannot be used. Current status: $(runsql "select status from tags where uid like '$MYTAGHASH'")" #"
    test -n "$(runsql "select user_login from users_vs_tags where tag_UID like '$MYTAGHASH'")" && die "Tag $MYTAGHASH belong to user $(runsql "select user_login from users_vs_tags where tag_UID like '$MYTAGHASH'")"
#    runsql "delete from users_vs_tags where tag_UID like '$2';delete from tags where UID like '$2'" # Might be marked deactivated
    runsql "insert into tags (UID, status) values ('$MYTAGHASH', 'ACTIVE'); insert into users_vs_tags values ('$1', '$MYTAGHASH')" 
    echo "Added tag $MYTAGHASH to user '$1'"
}

gettaginfo()
{
    test -z "$1" && die "Specify the tag hash"
    echo "$(runsql "select status from tags where uid like '$1'") $(runsql "select user_login from users_vs_tags where tag_UID like '$1'")"
}

revoketag()
{
    test -z "$1" && die "Specify the tag hash"
    test -z "$(runsql "select status from tags where UID like '$1'")" && die "Tag $1 not in database"
    TAGSTATE='DISABLED'
    test "$2" = "STOLEN" -o "$2" = "LOST" && TAGSTATE="$2"
    runsql "update tags set status='$TAGSTATE' where UID like '$1'"
}

listusertags()
{
    test -z "$1" && die "Specify the user name"
    runsql "select tag_UID from users_vs_tags where user_login like '$1'"
}

listusers()
{
    runsql "select login from users"
}

dumpflat()
{
    runsql "call getflattags"
}

case "$1" in
    "adduser")
	adduser $2
	;;
    "addtag")
	addtag "$2" "$3"
	;;
    "gettaginfo")
	gettaginfo "$2"
	;;
    "revoketag")
	revoketag "$2" "$3"
	;;
    "listusers")
	listusers
	;;
    "listusertags")
	listusertags "$2"
	;;
    "listalltags")
	listusers|while read myuser; do echo "User $myuser:"; listusertags "$myuser"; done
	;;
    "dumpflat")
	SQLUSER='rfid_shell_user'
	dumpflat
	;;
    *)
	helptext
	;;
esac
